[{"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\pages\\Analytics.js":"1","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\DataTable.js":"2","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\ProgressBar.js":"3","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\TaskProgress.js":"4","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\ChatView.js":"5","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\Groups.js":"6","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\Nav.js":"7","D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\pages\\Login.js":"8"},{"size":3040,"mtime":1684089742528,"results":"9","hashOfConfig":"10"},{"size":3454,"mtime":1684089742525,"results":"11","hashOfConfig":"10"},{"size":3481,"mtime":1684089742526,"results":"12","hashOfConfig":"10"},{"size":2062,"mtime":1684092811187,"results":"13","hashOfConfig":"10"},{"size":17097,"mtime":1684091940941,"results":"14","hashOfConfig":"10"},{"size":4994,"mtime":1684091343851,"results":"15","hashOfConfig":"10"},{"size":4038,"mtime":1684090351212,"results":"16","hashOfConfig":"10"},{"size":5965,"mtime":1684091696878,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rkawqz",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\pages\\Analytics.js",["44"],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\DataTable.js",["45","46"],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\ProgressBar.js",[],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\TaskProgress.js",[],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\ChatView.js",["47","48"],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\Groups.js",["49"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { Flex, List, LinkBox, Heading, IconButton, useDisclosure, Button, Stack, Input } from \"@chakra-ui/react\"\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { AddIcon, CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nfunction Groups() {\r\n    const [groups, setGroups] = useState([{}])\r\n    const [updatedGroups, setUpdatedGroups] = useState()\r\n    let navigate = useNavigate();\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n\r\n    async function fetchGroups() {\r\n        try {\r\n            const groups = await fetch(`/textChat/users/${sessionStorage.getItem('userId')}/groups`);\r\n            const groupsData = await groups.json();\r\n\r\n            const privateChats = await fetch(`/textChat/users/${sessionStorage.getItem('userId')}/private`);\r\n            const privateData = await privateChats.json();\r\n\r\n            setGroups(groupsData.data.concat(privateData.data));\r\n        } catch (error) {\r\n            console.error('Error fetching groups:', error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGroups();\r\n    }, [updatedGroups])\r\n\r\n    const createGroup = async () => {\r\n        const groupData = {\r\n            Name: document.getElementById('groupInput').value\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/textChat/groups`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(groupData)\r\n            })\r\n            if (response.status === 200) {\r\n                const responseData = await response.json();\r\n                const chatId = responseData.message.newId;\r\n                console.log(chatId)\r\n                const response2 = await fetch('/textChat/membership', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({ userId: parseInt(sessionStorage.getItem('userId')), groupId: parseInt(chatId) })\r\n                });\r\n\r\n                if (!response2.ok) {\r\n                    console.error('Error while creating membership:', await response.text());\r\n                }\r\n                setUpdatedGroups(!updatedGroups)\r\n            }\r\n        } catch (error) {\r\n            console.error('There was an error creating a new chat:', error)\r\n        }\r\n    }\r\n\r\n    const deleteGroup = async (id) => {\r\n        try {\r\n            await fetch(`/textChat/groups/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n\r\n            setUpdatedGroups(!updatedGroups);\r\n            return navigate('');\r\n        } catch (error) {\r\n            console.error('Error fetching groups:', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex position='relative' flexDir='column' bg='#3C3C3D' flexBasis='400px'>\r\n            <List>\r\n                {groups.map((item) => {\r\n                    const link = `${item.idGroup}`\r\n                    return (\r\n                        <Flex key={item.idGroup} align='center' justify='space-between'>\r\n                            <LinkBox as='article' p='5' >\r\n                                <Heading size='md' my='2' color='whiteAlpha.900'>\r\n                                    <Link to={link}>\r\n                                        {item.Name}\r\n                                    </Link>\r\n                                </Heading>\r\n                            </LinkBox>\r\n                            <IconButton mr='0.5em' color='whiteAlpha.700' bg='' aria-label='Delete Group' icon={<CloseIcon />} onClick={() => deleteGroup(item.idGroup)} _hover={{ color: 'white', backgroundColor: '' }} />\r\n                        </Flex>\r\n                    )\r\n                })}\r\n            </List>\r\n            <IconButton size='lg' color='white' bg='#F4442E' position='absolute' bottom='1em' right='1em' onClick={onOpen} isRound='true' icon={<AddIcon />} aria-label=\"Create new chat\" _hover={{ color: 'black', backgroundColor: 'white' }} />\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Create New Chat</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Input id='groupInput' type='text' placeholder=\"Name of chat\" />\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme='blue' onClick={() => { onClose(); createGroup() }}>\r\n                            Create\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Groups;",[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\Components\\Nav.js",[],[],"D:\\Documents\\GitHub\\TeamProject_Part3\\client\\src\\pages\\Login.js",["50","51"],[],{"ruleId":"52","severity":1,"message":"53","line":3,"column":30,"nodeType":"54","messageId":"55","endLine":3,"endColumn":39},{"ruleId":"52","severity":1,"message":"56","line":4,"column":10,"nodeType":"54","messageId":"55","endLine":4,"endColumn":16},{"ruleId":"52","severity":1,"message":"57","line":9,"column":5,"nodeType":"54","messageId":"55","endLine":9,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":97,"column":8,"nodeType":"60","endLine":97,"endColumn":12,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":102,"column":8,"nodeType":"60","endLine":102,"endColumn":14,"suggestions":"63"},{"ruleId":"52","severity":1,"message":"64","line":2,"column":75,"nodeType":"54","messageId":"55","endLine":2,"endColumn":80},{"ruleId":"52","severity":1,"message":"65","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"66","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":22},"no-unused-vars","'useSortBy' is defined but never used.","Identifier","unusedVar","'Avatar' is defined but never used.","'SortingState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchAllUsers', 'fetchGroupInfo', 'fetchGroupUsers', and 'fetchMessages'. Either include them or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has missing dependencies: 'fetchGroupInfo' and 'fetchMessages'. Either include them or remove the dependency array.",["68"],"'Stack' is defined but never used.","'Link' is defined but never used.","'HStack' is defined but never used.",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchAllUsers, fetchGroupInfo, fetchGroupUsers, fetchMessages, id]",{"range":"73","text":"74"},"Update the dependencies array to be: [fetchGroupInfo, fetchMessages, sent]",{"range":"75","text":"76"},[3477,3481],"[fetchAllUsers, fetchGroupInfo, fetchGroupUsers, fetchMessages, id]",[3569,3575],"[fetchGroupInfo, fetchMessages, sent]"]