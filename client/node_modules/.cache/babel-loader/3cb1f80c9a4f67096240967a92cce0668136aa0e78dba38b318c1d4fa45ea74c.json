{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from \"react\";\nimport { Box } from \"@chakra-ui/layout\";\nimport { useColorModeValue } from \"@chakra-ui/system\";\nvar Placeholder = function Placeholder(props) {\n  var children = props.children,\n    className = props.className,\n    cx = props.cx,\n    innerProps = props.innerProps,\n    chakraStyles = props.selectProps.chakraStyles;\n\n  /**\n   * The chakra UI global placeholder color\n   *\n   * @see {@link https://github.com/chakra-ui/chakra-ui/blob/13c6d2e08b61e179773be4722bb81173dd599306/packages/theme/src/styles.ts#L13}\n   */\n  var color = useColorModeValue(\"gray.400\", \"whiteAlpha.400\");\n  var initialSx = {\n    gridArea: \"1 / 1 / 2 / 3\",\n    color: color,\n    mx: \"0.125rem\",\n    userSelect: \"none\"\n  };\n  var sx = chakraStyles != null && chakraStyles.placeholder ? chakraStyles.placeholder(initialSx, props) : initialSx;\n  return /*#__PURE__*/React.createElement(Box, _extends({}, innerProps, {\n    className: cx({\n      placeholder: true\n    }, className),\n    sx: sx\n  }), children);\n};\nexport default Placeholder;","map":{"version":3,"names":["React","Box","useColorModeValue","Placeholder","props","children","className","cx","innerProps","chakraStyles","selectProps","color","initialSx","gridArea","mx","userSelect","sx","placeholder","createElement","_extends"],"sources":["C:\\Users\\aidan\\Desktop\\tempLogin\\client\\node_modules\\chakra-react-select\\src\\chakra-components\\placeholder.tsx"],"sourcesContent":["import React from \"react\";\nimport { Box } from \"@chakra-ui/layout\";\nimport type { SystemStyleObject } from \"@chakra-ui/system\";\nimport { useColorModeValue } from \"@chakra-ui/system\";\nimport type { GroupBase, PlaceholderProps } from \"react-select\";\n\nconst Placeholder = <\n  Option,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: PlaceholderProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    className,\n    cx,\n    innerProps,\n    selectProps: { chakraStyles },\n  } = props;\n\n  /**\n   * The chakra UI global placeholder color\n   *\n   * @see {@link https://github.com/chakra-ui/chakra-ui/blob/13c6d2e08b61e179773be4722bb81173dd599306/packages/theme/src/styles.ts#L13}\n   */\n  const color = useColorModeValue(\"gray.400\", \"whiteAlpha.400\");\n\n  const initialSx: SystemStyleObject = {\n    gridArea: \"1 / 1 / 2 / 3\",\n    color,\n    mx: \"0.125rem\",\n    userSelect: \"none\",\n  };\n\n  const sx = chakraStyles?.placeholder\n    ? chakraStyles.placeholder(initialSx, props)\n    : initialSx;\n\n  return (\n    <Box\n      {...innerProps}\n      className={cx(\n        {\n          placeholder: true,\n        },\n        className\n      )}\n      sx={sx}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default Placeholder;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,mBAAmB;AAEvC,SAASC,iBAAiB,QAAQ,mBAAmB;AAGrD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAKfC,KAA+C,EAC5C;EACH,IACEC,QAAQ,GAKND,KAAK,CALPC,QAAQ;IACRC,SAAS,GAIPF,KAAK,CAJPE,SAAS;IACTC,EAAE,GAGAH,KAAK,CAHPG,EAAE;IACFC,UAAU,GAERJ,KAAK,CAFPI,UAAU;IACKC,YAAY,GACzBL,KAAK,CADPM,WAAW,CAAID,YAAY;;EAG7B;AACF;AACA;AACA;AACA;EACE,IAAME,KAAK,GAAGT,iBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC;EAE7D,IAAMU,SAA4B,GAAG;IACnCC,QAAQ,EAAE,eAAe;IACzBF,KAAK,EAALA,KAAK;IACLG,EAAE,EAAE,UAAU;IACdC,UAAU,EAAE;EACd,CAAC;EAED,IAAMC,EAAE,GAAGP,YAAY,YAAZA,YAAY,CAAEQ,WAAW,GAChCR,YAAY,CAACQ,WAAW,CAACL,SAAS,EAAER,KAAK,CAAC,GAC1CQ,SAAS;EAEb,oBACEZ,KAAA,CAAAkB,aAAA,CAACjB,GAAG,EAAAkB,QAAA,KACEX,UAAU;IACdF,SAAS,EAAEC,EAAE,CACX;MACEU,WAAW,EAAE;IACf,CAAC,EACDX,SAAS,CACT;IACFU,EAAE,EAAEA;EAAG,IAENX,QAAQ,CACL;AAEV,CAAC;AAED,eAAeF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}