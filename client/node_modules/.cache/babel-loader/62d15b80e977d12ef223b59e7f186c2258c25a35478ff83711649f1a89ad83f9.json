{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidan\\\\Desktop\\\\tempLogin\\\\client\\\\src\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { HStack, Button, Flex, Heading, Input, InputGroup, InputRightElement, useDisclosure, Stack, List, ListItem, LinkBox, LinkOverlay, IconButton, Divider } from '@chakra-ui/react';\nimport { Drawer, DrawerBody, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton } from '@chakra-ui/react';\nimport { Select } from 'chakra-react-select';\nimport { SettingsIcon, ChatIcon, CalendarIcon } from '@chakra-ui/icons';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './ChatWindow.css';\nimport ChatView from './Components/ChatView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  const [groups, setGroups] = useState([{}]);\n  const {\n    id\n  } = useParams();\n  function containsObject(obj, list) {\n    var i;\n    for (i = 0; i < list.length; i++) {\n      if (list[i].idUser === obj.idUser) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async function fetchGroups() {\n    try {\n      const groups = await fetch(`/users/${sessionStorage.getItem('userId')}/groups`);\n      const groupsData = await groups.json();\n      const privateChats = await fetch(`/users/${sessionStorage.getItem('userId')}/private`);\n      const privateData = await privateChats.json();\n      setGroups(groupsData.data.concat(privateData.data));\n      console.log(groupsData.data.concat(privateData.data));\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n    }\n  }\n  useEffect(() => {\n    fetchGroups();\n    fetchGroupInfo();\n    fetchGroupUsers();\n    fetchAllUsers();\n    fetchMessages();\n  }, []);\n\n  // Navigation onClick functions\n\n  let navigate = useNavigate();\n  const redirectDataAnalytics = () => {\n    return navigate(\"/data-analytics\");\n  };\n  const redirectTextChat = () => {\n    return navigate(\"/text-chat\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDir: 'column',\n      bg: \"teal.600\",\n      justify: \"center\",\n      gap: \"10px\",\n      px: \"0.5em\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        bg: \"teal.500\",\n        \"aria-label\": \"Data Analytics\",\n        icon: /*#__PURE__*/_jsxDEV(CalendarIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 77\n        }, this),\n        onClick: redirectDataAnalytics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        bg: \"teal.500\",\n        \"aria-label\": \"Text Chat\",\n        icon: /*#__PURE__*/_jsxDEV(ChatIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 72\n        }, this),\n        onClick: redirectTextChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDir: \"column\",\n      bg: \"teal.500\",\n      flexGrow: \"0.1\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: groups.map(item => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(LinkBox, {\n              as: \"article\",\n              p: \"3\",\n              _hover: {\n                color: \"white.500\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Heading, {\n                size: \"md\",\n                children: /*#__PURE__*/_jsxDEV(LinkOverlay, {\n                  href: item.idGroup,\n                  children: item.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this)\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatView, {\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatWindow, \"geYt4eIJX8Z7kWmypG39nMhXjwc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useEffect","useState","HStack","Button","Flex","Heading","Input","InputGroup","InputRightElement","useDisclosure","Stack","List","ListItem","LinkBox","LinkOverlay","IconButton","Divider","Drawer","DrawerBody","DrawerFooter","DrawerHeader","DrawerOverlay","DrawerContent","DrawerCloseButton","Select","SettingsIcon","ChatIcon","CalendarIcon","useNavigate","useParams","ChatView","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","_s","groups","setGroups","id","containsObject","obj","list","i","length","idUser","fetchGroups","fetch","sessionStorage","getItem","groupsData","json","privateChats","privateData","data","concat","console","log","error","fetchGroupInfo","fetchGroupUsers","fetchAllUsers","fetchMessages","navigate","redirectDataAnalytics","redirectTextChat","className","children","flexDir","bg","justify","gap","px","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","flexGrow","map","item","as","p","_hover","color","size","href","idGroup","Name","_c","$RefreshReg$"],"sources":["C:/Users/aidan/Desktop/tempLogin/client/src/ChatWindow.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { HStack, Button, Flex, Heading, Input, InputGroup, InputRightElement, useDisclosure, Stack, List, ListItem, LinkBox, LinkOverlay, IconButton, Divider } from '@chakra-ui/react'\r\nimport { Drawer, DrawerBody, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton } from '@chakra-ui/react'\r\nimport { Select } from 'chakra-react-select'\r\nimport { SettingsIcon, ChatIcon, CalendarIcon } from '@chakra-ui/icons';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './ChatWindow.css'\r\nimport ChatView from './Components/ChatView'\r\n\r\n\r\n\r\nfunction ChatWindow() {\r\n    const [groups, setGroups] = useState([{}])\r\n    const { id } = useParams();\r\n\r\n    function containsObject(obj, list) {\r\n        var i;\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i].idUser === obj.idUser) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    async function fetchGroups() {\r\n        try {\r\n            const groups = await fetch(`/users/${sessionStorage.getItem('userId')}/groups`);\r\n            const groupsData = await groups.json();\r\n\r\n            const privateChats = await fetch(`/users/${sessionStorage.getItem('userId')}/private`);\r\n            const privateData = await privateChats.json();\r\n\r\n            setGroups(groupsData.data.concat(privateData.data));\r\n            console.log(groupsData.data.concat(privateData.data))\r\n        } catch (error) {\r\n            console.error('Error fetching groups:', error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGroups();\r\n        fetchGroupInfo();\r\n        fetchGroupUsers();\r\n        fetchAllUsers();\r\n        fetchMessages();\r\n    }, [])\r\n\r\n\r\n    // Navigation onClick functions\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const redirectDataAnalytics = () => {\r\n        return navigate(\"/data-analytics\")\r\n    }\r\n\r\n    const redirectTextChat = () => {\r\n        return navigate(\"/text-chat\")\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <Flex flexDir={'column'} bg='teal.600' justify='center' gap='10px' px='0.5em'>\r\n                <IconButton bg='teal.500' aria-label='Data Analytics' icon={<CalendarIcon />} onClick={redirectDataAnalytics} />\r\n                <IconButton bg='teal.500' aria-label='Text Chat' icon={<ChatIcon />} onClick={redirectTextChat} />\r\n            </Flex>\r\n            <Flex flexDir='column' bg='teal.500' flexGrow='0.1'>\r\n                <List>\r\n                    {groups.map((item) => (\r\n                        <>\r\n                            <ListItem key={item} >\r\n                                <LinkBox as='article' p='3' _hover={{ color: \"white.500\" }}>\r\n                                    <Heading size='md'>\r\n                                        <LinkOverlay href={item.idGroup}>\r\n                                            {item.Name}\r\n                                        </LinkOverlay>\r\n                                    </Heading>\r\n                                </LinkBox>\r\n                            </ListItem>\r\n                            <Divider />\r\n                        </>\r\n                    ))}\r\n                </List>\r\n            </Flex>\r\n            <ChatView id={id} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}