{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef } from \"react\";\nimport AsyncCreatableReactSelect from \"react-select/async-creatable\";\nimport useChakraSelectProps from \"../use-chakra-select-props\";\nvar AsyncCreatableSelect = /*#__PURE__*/forwardRef(function (props, ref) {\n  var chakraSelectProps = useChakraSelectProps(props);\n  return /*#__PURE__*/React.createElement(AsyncCreatableReactSelect, _extends({\n    ref: ref\n  }, chakraSelectProps));\n});\nexport default AsyncCreatableSelect;","map":{"version":3,"names":["React","forwardRef","AsyncCreatableReactSelect","useChakraSelectProps","AsyncCreatableSelect","props","ref","chakraSelectProps","createElement","_extends"],"sources":["D:\\Documents\\GitHub\\TeamProject_Part3\\client\\node_modules\\chakra-react-select\\src\\select\\async-creatable-select.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport type { MutableRefObject, ReactElement, RefAttributes } from \"react\";\nimport type { GroupBase, SelectInstance } from \"react-select\";\nimport AsyncCreatableReactSelect from \"react-select/async-creatable\";\nimport type { AsyncCreatableProps } from \"react-select/async-creatable\";\nimport useChakraSelectProps from \"../use-chakra-select-props\";\n\nexport type AsyncCreatableSelectComponent = <\n  Option = unknown,\n  IsMulti extends boolean = false,\n  Group extends GroupBase<Option> = GroupBase<Option>\n>(\n  props: AsyncCreatableProps<Option, IsMulti, Group> &\n    RefAttributes<SelectInstance<Option, IsMulti, Group>>\n) => ReactElement;\n\nconst AsyncCreatableSelect = forwardRef(\n  <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(\n    props: AsyncCreatableProps<Option, IsMulti, Group>,\n    ref:\n      | ((instance: SelectInstance<Option, IsMulti, Group> | null) => void)\n      | MutableRefObject<SelectInstance<Option, IsMulti, Group> | null>\n      | null\n  ) => {\n    const chakraSelectProps = useChakraSelectProps(props);\n\n    return <AsyncCreatableReactSelect ref={ref} {...chakraSelectProps} />;\n  }\n) as AsyncCreatableSelectComponent;\n\nexport default AsyncCreatableSelect;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAGzC,OAAOC,yBAAyB,MAAM,8BAA8B;AAEpE,OAAOC,oBAAoB,MAAM,4BAA4B;AAW7D,IAAMC,oBAAoB,gBAAGH,UAAU,CACrC,UACEI,KAAkD,EAClDC,GAGQ,EACL;EACH,IAAMC,iBAAiB,GAAGJ,oBAAoB,CAACE,KAAK,CAAC;EAErD,oBAAOL,KAAA,CAAAQ,aAAA,CAACN,yBAAyB,EAAAO,QAAA;IAACH,GAAG,EAAEA;EAAI,GAAKC,iBAAiB,EAAI;AACvE,CAAC,CAC+B;AAElC,eAAeH,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}