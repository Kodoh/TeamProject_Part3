{"ast":null,"code":"var _excluded = [\"components\", \"theme\", \"size\", \"colorScheme\", \"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\", \"inputId\", \"tagVariant\", \"selectedOptionStyle\", \"selectedOptionColorScheme\", \"selectedOptionColor\", \"variant\", \"focusBorderColor\", \"errorBorderColor\", \"chakraStyles\", \"onFocus\", \"onBlur\", \"menuIsOpen\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport chakraComponents from \"./chakra-components\";\nvar useChakraSelectProps = function useChakraSelectProps(_ref) {\n  var _props$ariaInvalid;\n  var _ref$components = _ref.components,\n    components = _ref$components === void 0 ? {} : _ref$components,\n    theme = _ref.theme,\n    size = _ref.size,\n    _ref$colorScheme = _ref.colorScheme,\n    colorScheme = _ref$colorScheme === void 0 ? \"gray\" : _ref$colorScheme,\n    isDisabled = _ref.isDisabled,\n    isInvalid = _ref.isInvalid,\n    isReadOnly = _ref.isReadOnly,\n    isRequired = _ref.isRequired,\n    inputId = _ref.inputId,\n    tagVariant = _ref.tagVariant,\n    _ref$selectedOptionSt = _ref.selectedOptionStyle,\n    selectedOptionStyle = _ref$selectedOptionSt === void 0 ? \"color\" : _ref$selectedOptionSt,\n    selectedOptionColorScheme = _ref.selectedOptionColorScheme,\n    selectedOptionColor = _ref.selectedOptionColor,\n    variant = _ref.variant,\n    focusBorderColor = _ref.focusBorderColor,\n    errorBorderColor = _ref.errorBorderColor,\n    _ref$chakraStyles = _ref.chakraStyles,\n    chakraStyles = _ref$chakraStyles === void 0 ? {} : _ref$chakraStyles,\n    onFocus = _ref.onFocus,\n    onBlur = _ref.onBlur,\n    menuIsOpen = _ref.menuIsOpen,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var chakraTheme = useTheme();\n  var defaultVariant = chakraTheme.components.Input.defaultProps.variant;\n\n  // Combine the props passed into the component with the props that can be set\n  // on a surrounding form control to get the values of `isDisabled` and\n  // `isInvalid`\n  var inputProps = useFormControl({\n    id: inputId,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isRequired: isRequired,\n    isReadOnly: isReadOnly,\n    onFocus: onFocus,\n    onBlur: onBlur\n  });\n\n  // Unless `menuIsOpen` is controlled, disable it if the select is readonly\n  var realMenuIsOpen = menuIsOpen != null ? menuIsOpen : inputProps.readOnly ? false : undefined;\n\n  // Ensure that the selected option style is either `color` or `check`\n  var realSelectedOptionStyle = selectedOptionStyle;\n  var selectedOptionStyleOptions = [\"color\", \"check\"];\n  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {\n    realSelectedOptionStyle = \"color\";\n  }\n\n  // Ensure that the color used for the selected options is a string\n  var realSelectedOptionColorScheme = selectedOptionColorScheme || selectedOptionColor || \"blue\";\n  if (typeof realSelectedOptionColorScheme !== \"string\") {\n    realSelectedOptionColorScheme = \"blue\";\n  }\n  var select = _extends({\n    // Allow overriding of custom components\n    components: _extends({}, chakraComponents, components),\n    // Custom select props\n    colorScheme: colorScheme,\n    size: size,\n    tagVariant: tagVariant,\n    selectedOptionStyle: realSelectedOptionStyle,\n    selectedOptionColorScheme: realSelectedOptionColorScheme,\n    variant: variant != null ? variant : defaultVariant,\n    chakraStyles: chakraStyles,\n    focusBorderColor: focusBorderColor,\n    errorBorderColor: errorBorderColor,\n    // Extract custom props from form control\n    onFocus: inputProps.onFocus,\n    onBlur: inputProps.onBlur,\n    isDisabled: inputProps.disabled,\n    isInvalid: !!inputProps[\"aria-invalid\"],\n    inputId: inputProps.id,\n    isReadOnly: inputProps.readOnly,\n    menuIsOpen: realMenuIsOpen\n  }, props, {\n    // aria-invalid can be passed to react-select, so we allow that to\n    // override the `isInvalid` prop\n    \"aria-invalid\": (_props$ariaInvalid = props[\"aria-invalid\"]) != null ? _props$ariaInvalid : inputProps[\"aria-invalid\"]\n  });\n  return select;\n};\nexport default useChakraSelectProps;","map":{"version":3,"names":["useFormControl","useTheme","chakraComponents","useChakraSelectProps","_ref","_props$ariaInvalid","_ref$components","components","theme","size","_ref$colorScheme","colorScheme","isDisabled","isInvalid","isReadOnly","isRequired","inputId","tagVariant","_ref$selectedOptionSt","selectedOptionStyle","selectedOptionColorScheme","selectedOptionColor","variant","focusBorderColor","errorBorderColor","_ref$chakraStyles","chakraStyles","onFocus","onBlur","menuIsOpen","props","_objectWithoutPropertiesLoose","_excluded","chakraTheme","defaultVariant","Input","defaultProps","inputProps","id","realMenuIsOpen","readOnly","undefined","realSelectedOptionStyle","selectedOptionStyleOptions","includes","realSelectedOptionColorScheme","select","_extends","disabled"],"sources":["D:\\Documents\\GitHub\\TeamProject_Part3\\client\\node_modules\\chakra-react-select\\src\\use-chakra-select-props.ts"],"sourcesContent":["import { useFormControl } from \"@chakra-ui/form-control\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport type { GroupBase, Props } from \"react-select\";\nimport chakraComponents from \"./chakra-components\";\nimport type { SelectedOptionStyle } from \"./types\";\n\nconst useChakraSelectProps = <\n  Option,\n  IsMulti extends boolean = false,\n  Group extends GroupBase<Option> = GroupBase<Option>\n>({\n  components = {},\n  // eslint-disable-next-line deprecation/deprecation\n  theme,\n  size,\n  colorScheme = \"gray\",\n  isDisabled,\n  isInvalid,\n  isReadOnly,\n  isRequired,\n  inputId,\n  tagVariant,\n  selectedOptionStyle = \"color\",\n  selectedOptionColorScheme,\n  // eslint-disable-next-line deprecation/deprecation\n  selectedOptionColor,\n  variant,\n  focusBorderColor,\n  errorBorderColor,\n  chakraStyles = {},\n  onFocus,\n  onBlur,\n  menuIsOpen,\n  ...props\n}: Props<Option, IsMulti, Group>): Props<Option, IsMulti, Group> => {\n  const chakraTheme = useTheme();\n  const { variant: defaultVariant } = chakraTheme.components.Input.defaultProps;\n\n  // Combine the props passed into the component with the props that can be set\n  // on a surrounding form control to get the values of `isDisabled` and\n  // `isInvalid`\n  const inputProps = useFormControl({\n    id: inputId,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isReadOnly,\n    onFocus,\n    onBlur,\n  });\n\n  // Unless `menuIsOpen` is controlled, disable it if the select is readonly\n  const realMenuIsOpen =\n    menuIsOpen ?? (inputProps.readOnly ? false : undefined);\n\n  // Ensure that the selected option style is either `color` or `check`\n  let realSelectedOptionStyle: SelectedOptionStyle = selectedOptionStyle;\n  const selectedOptionStyleOptions: SelectedOptionStyle[] = [\"color\", \"check\"];\n  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {\n    realSelectedOptionStyle = \"color\";\n  }\n\n  // Ensure that the color used for the selected options is a string\n  let realSelectedOptionColorScheme: string =\n    selectedOptionColorScheme || selectedOptionColor || \"blue\";\n  if (typeof realSelectedOptionColorScheme !== \"string\") {\n    realSelectedOptionColorScheme = \"blue\";\n  }\n\n  const select: Props<Option, IsMulti, Group> = {\n    // Allow overriding of custom components\n    components: {\n      ...chakraComponents,\n      ...components,\n    },\n    // Custom select props\n    colorScheme,\n    size,\n    tagVariant,\n    selectedOptionStyle: realSelectedOptionStyle,\n    selectedOptionColorScheme: realSelectedOptionColorScheme,\n    variant: variant ?? defaultVariant,\n    chakraStyles,\n    focusBorderColor,\n    errorBorderColor,\n    // Extract custom props from form control\n    onFocus: inputProps.onFocus,\n    onBlur: inputProps.onBlur,\n    isDisabled: inputProps.disabled,\n    isInvalid: !!inputProps[\"aria-invalid\"],\n    inputId: inputProps.id,\n    isReadOnly: inputProps.readOnly,\n    menuIsOpen: realMenuIsOpen,\n    ...props,\n    // aria-invalid can be passed to react-select, so we allow that to\n    // override the `isInvalid` prop\n    \"aria-invalid\": props[\"aria-invalid\"] ?? inputProps[\"aria-invalid\"],\n  };\n\n  return select;\n};\n\nexport default useChakraSelectProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}