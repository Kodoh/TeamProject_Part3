{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from \"react\";\nimport { Box } from \"@chakra-ui/layout\";\nvar SingleValue = function SingleValue(props) {\n  var children = props.children,\n    className = props.className,\n    cx = props.cx,\n    isDisabled = props.isDisabled,\n    innerProps = props.innerProps,\n    chakraStyles = props.selectProps.chakraStyles;\n  var initialSx = {\n    gridArea: \"1 / 1 / 2 / 3\",\n    mx: \"0.125rem\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\"\n  };\n  var sx = chakraStyles != null && chakraStyles.singleValue ? chakraStyles.singleValue(initialSx, props) : initialSx;\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    className: cx({\n      \"single-value\": true,\n      \"single-value--is-disabled\": isDisabled\n    }, className),\n    sx: sx\n  }, innerProps), children);\n};\nexport default SingleValue;","map":{"version":3,"names":["React","Box","SingleValue","props","children","className","cx","isDisabled","innerProps","chakraStyles","selectProps","initialSx","gridArea","mx","maxWidth","overflow","textOverflow","whiteSpace","sx","singleValue","createElement","_extends"],"sources":["D:\\Documents\\GitHub\\TeamProject_Part3\\client\\node_modules\\chakra-react-select\\src\\chakra-components\\single-value.tsx"],"sourcesContent":["import React from \"react\";\nimport { Box } from \"@chakra-ui/layout\";\nimport type { SystemStyleObject } from \"@chakra-ui/system\";\nimport type { GroupBase, SingleValueProps } from \"react-select\";\n\nconst SingleValue = <\n  Option,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: SingleValueProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    className,\n    cx,\n    isDisabled,\n    innerProps,\n    selectProps: { chakraStyles },\n  } = props;\n\n  const initialSx: SystemStyleObject = {\n    gridArea: \"1 / 1 / 2 / 3\",\n    mx: \"0.125rem\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n  };\n\n  const sx = chakraStyles?.singleValue\n    ? chakraStyles.singleValue(initialSx, props)\n    : initialSx;\n\n  return (\n    <Box\n      className={cx(\n        {\n          \"single-value\": true,\n          \"single-value--is-disabled\": isDisabled,\n        },\n        className\n      )}\n      sx={sx}\n      {...innerProps}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default SingleValue;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,mBAAmB;AAIvC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAKfC,KAA+C,EAC5C;EACH,IACEC,QAAQ,GAMND,KAAK,CANPC,QAAQ;IACRC,SAAS,GAKPF,KAAK,CALPE,SAAS;IACTC,EAAE,GAIAH,KAAK,CAJPG,EAAE;IACFC,UAAU,GAGRJ,KAAK,CAHPI,UAAU;IACVC,UAAU,GAERL,KAAK,CAFPK,UAAU;IACKC,YAAY,GACzBN,KAAK,CADPO,WAAW,CAAID,YAAY;EAG7B,IAAME,SAA4B,GAAG;IACnCC,QAAQ,EAAE,eAAe;IACzBC,EAAE,EAAE,UAAU;IACdC,QAAQ,EAAE,MAAM;IAChBC,QAAQ,EAAE,QAAQ;IAClBC,YAAY,EAAE,UAAU;IACxBC,UAAU,EAAE;EACd,CAAC;EAED,IAAMC,EAAE,GAAGT,YAAY,YAAZA,YAAY,CAAEU,WAAW,GAChCV,YAAY,CAACU,WAAW,CAACR,SAAS,EAAER,KAAK,CAAC,GAC1CQ,SAAS;EAEb,oBACEX,KAAA,CAAAoB,aAAA,CAACnB,GAAG,EAAAoB,QAAA;IACFhB,SAAS,EAAEC,EAAE,CACX;MACE,cAAc,EAAE,IAAI;MACpB,2BAA2B,EAAEC;IAC/B,CAAC,EACDF,SAAS,CACT;IACFa,EAAE,EAAEA;EAAG,GACHV,UAAU,GAEbJ,QAAQ,CACL;AAEV,CAAC;AAED,eAAeF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}