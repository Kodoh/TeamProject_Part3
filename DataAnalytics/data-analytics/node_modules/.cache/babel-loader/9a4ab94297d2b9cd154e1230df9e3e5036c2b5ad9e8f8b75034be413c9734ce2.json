{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\GitHub\\\\TeamProject_Part3\\\\DataAnalytics\\\\data-analytics\\\\src\\\\DataTable.js\",\n  _s = $RefreshSig$();\nimport * as React from \"react\";\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\nimport { Avatar, AvatarBadge, AvatarGroup } from '@chakra-ui/react';\nimport { useReactTable, flexRender, getCoreRowModel, ColumnDef, SortingState, getSortedRowModel } from \"@tanstack/react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DataTable(_ref) {\n  _s();\n  let {\n    data,\n    columns,\n    additionalCols\n  } = _ref;\n  const [sorting, setSorting] = React.useState([]);\n  const table = useReactTable({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    children: [/*#__PURE__*/_jsxDEV(Thead, {\n      children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(Tr, {\n        children: headerGroup.headers.map(header => {\n          const meta = header.column.columnDef.meta;\n          return /*#__PURE__*/_jsxDEV(Th, {\n            onClick: header.column.getToggleSortingHandler(),\n            isNumeric: meta === null || meta === void 0 ? void 0 : meta.isNumeric,\n            children: [flexRender(header.column.columnDef.header, header.getContext()), /*#__PURE__*/_jsxDEV(chakra.span, {\n              pl: \"4\",\n              children: header.column.getIsSorted() ? header.column.getIsSorted() === \"desc\" ? /*#__PURE__*/_jsxDEV(TriangleUpIcon, {\n                \"aria-label\": \"sorted ascending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 49\n              }, this) : /*#__PURE__*/_jsxDEV(TriangleDownIcon, {\n                \"aria-label\": \"sorted descending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 49\n              }, this) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 37\n            }, this)]\n          }, header.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 33\n          }, this);\n        })\n      }, headerGroup.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n      children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(Tr, {\n        children: [/*#__PURE__*/_jsxDEV(Td, {}, row.getVisibleCells()[0].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), row.getVisibleCells().map(cell => {\n          const meta = cell.column.columnDef.meta;\n          return /*#__PURE__*/_jsxDEV(Td, {\n            isNumeric: meta === null || meta === void 0 ? void 0 : meta.isNumeric,\n            children: flexRender(cell.column.columnDef.cell, cell.getContext())\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this);\n        })]\n      }, row.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(DataTable, \"qg5rok0fZeVwH4q3itwzrlIy2qs=\", false, function () {\n  return [useReactTable];\n});\n_c = DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","Table","Thead","Tbody","Tr","Th","Td","chakra","TriangleDownIcon","TriangleUpIcon","Avatar","AvatarBadge","AvatarGroup","useReactTable","flexRender","getCoreRowModel","ColumnDef","SortingState","getSortedRowModel","jsxDEV","_jsxDEV","DataTable","_ref","_s","data","columns","additionalCols","sorting","setSorting","useState","table","onSortingChange","state","children","getHeaderGroups","map","headerGroup","headers","header","meta","column","columnDef","onClick","getToggleSortingHandler","isNumeric","getContext","span","pl","getIsSorted","fileName","_jsxFileName","lineNumber","columnNumber","id","getRowModel","rows","row","getVisibleCells","cell","_c","$RefreshReg$"],"sources":["D:/Documents/GitHub/TeamProject_Part3/DataAnalytics/data-analytics/src/DataTable.js"],"sourcesContent":["import * as React from \"react\";\r\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\";\r\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar, AvatarBadge, AvatarGroup } from '@chakra-ui/react'\r\nimport {\r\n    useReactTable,\r\n    flexRender,\r\n    getCoreRowModel,\r\n    ColumnDef,\r\n    SortingState,\r\n    getSortedRowModel\r\n} from \"@tanstack/react-table\";\r\n\r\n\r\nexport function DataTable({ data, columns, additionalCols }) {\r\n    const [sorting, setSorting] = React.useState([]);\r\n    const table = useReactTable({\r\n        columns,\r\n        data,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        onSortingChange: setSorting,\r\n        getSortedRowModel: getSortedRowModel(),\r\n        state: {\r\n            sorting\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Table>\r\n            <Thead>\r\n                {table.getHeaderGroups().map((headerGroup) => (\r\n                    <Tr key={headerGroup.id}>\r\n                        {headerGroup.headers.map((header) => {\r\n                            const meta = header.column.columnDef.meta;\r\n                            return (\r\n                                <Th\r\n                                    key={header.id}\r\n                                    onClick={header.column.getToggleSortingHandler()}\r\n                                    isNumeric={meta?.isNumeric}\r\n                                >\r\n                                    {flexRender(\r\n                                        header.column.columnDef.header,\r\n                                        header.getContext()\r\n                                    )}\r\n\r\n                                    <chakra.span pl=\"4\">\r\n                                        {header.column.getIsSorted() ? (\r\n                                            header.column.getIsSorted() === \"desc\" ? (\r\n                                                <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                                            ) : (\r\n                                                <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                                            )\r\n                                        ) : null}\r\n                                    </chakra.span>\r\n                                </Th>\r\n                            );\r\n                        })}\r\n                    </Tr>\r\n                ))}\r\n            </Thead>\r\n            <Tbody>\r\n                {table.getRowModel().rows.map((row) => (\r\n                    <Tr key={row.id}>\r\n                        <Td key={row.getVisibleCells()[0].id}>\r\n                            \r\n                        </Td>\r\n                        {row.getVisibleCells().map((cell) => {\r\n                            const meta = cell.column.columnDef.meta;\r\n                            return (\r\n                                <Td key={cell.id} isNumeric={meta?.isNumeric}>\r\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                                </Td>\r\n                            );\r\n                        })}\r\n                    </Tr>\r\n                ))}\r\n            </Tbody>\r\n        </Table>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}